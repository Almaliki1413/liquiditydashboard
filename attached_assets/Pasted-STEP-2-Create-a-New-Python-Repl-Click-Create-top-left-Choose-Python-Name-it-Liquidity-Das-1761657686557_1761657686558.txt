STEP 2: Create a New Python Repl

Click “+ Create” (top left)
Choose “Python”
Name it: Liquidity-Dashboard
Click “Create Repl”

You now have a blank Python project.

STEP 3: Add Your FRED API Key as a Secret (Secure)

On the left panel, click the lock icon (🔐 Secrets)
Click “Add Secret”
Key: FRED_API_KEY
Value: your_actual_api_key_here ← Paste your FRED key
Click “Add Secret”


This keeps your key hidden and secure.


STEP 4: Paste the Full Dashboard Code
Replace everything in main.py with this:
python# main.py — Raoul Pal Liquidity Dashboard (Replit)

import pandas as pd
import numpy as np
import plotly.graph_objects as go
from fredapi import Fred
import os
from datetime import datetime
import warnings
warnings.filterwarnings("ignore")

print("Fetching liquidity data...")

# === 1. GET FRED API KEY FROM SECRETS ===
fred = Fred(api_key=os.environ['FRED_API_KEY'])

# === 2. FETCH DATA ===
def get(series, name):
    try:
        return fred.get_series(series).rename(name)
    except:
        print(f"Warning: Could not fetch {series}")
        return pd.Series(name=name)

fed = get('WALCL', 'Fed_Assets')      # Fed balance sheet (weekly)
m2 = get('M2SL', 'M2')                # M2 money supply
ism = get('NAPM', 'ISM_PMI')          # ISM Manufacturing PMI
tga = get('WTREGEN', 'TGA')           # Treasury General Account
rrp = get('RRPONTSYD', 'ON_RRP')       # Overnight Reverse Repo

# === 3. RESAMPLE TO WEEKLY (THURSDAY) ===
df = pd.concat([fed, m2, ism, tga, rrp], axis=1)
df = df.resample('W-THU').last()
df = df.ffill().dropna(how='all')

if df.empty:
    print("No data fetched. Check FRED API key.")
    exit()

# === 4. CALCULATE METRICS ===
df['Fed_YoY'] = df['Fed_Assets'].pct_change(52) * 100
df['M2_YoY'] = df['M2'].pct_change(52) * 100
df['TGA_RRP'] = df['TGA'] + df['ON_RRP']
df['TGA_RRP_4wk'] = df['TGA_RRP'] - df['TGA_RRP'].shift(4)

# === 5. SIGNAL LOGIC ===
df['Signal'] = 'NEUTRAL'
df.loc[(df['Fed_YoY'] > 0) & 
       (df['TGA_RRP_4wk'] < 0) & 
       (df['M2_YoY'] > 0) & 
       (df['ISM_PMI'] > 47), 'Signal'] = 'RISK-ON'
df.loc[(df['Fed_YoY'] < -3) | (df['ISM_PMI'] < 45), 'Signal'] = 'TIGHT'

# === 6. PLOT WITH PLOTLY ===
fig = go.Figure()

fig.add_trace(go.Scatter(x=df.index, y=df['Fed_YoY'], name='Fed YoY %', line=dict(color='lime')))
fig.add_trace(go.Scatter(x=df.index, y=df['M2_YoY'], name='M2 YoY %', line=dict(color='cyan')))
fig.add_trace(go.Scatter(x=df.index, y=df['ISM_PMI'], name='ISM PMI', yaxis='y2', line=dict(color='orange', dash='dot')))

# Highlight RISK-ON periods
risk_on = df['Signal'] == 'RISK-ON'
if risk_on.any():
    periods = []
    start = None
    for i, val in enumerate(risk_on):
        if val and start is None:
            start = df.index[i]
        elif not val and start is not None:
            fig.add_vrect(x0=start, x1=df.index[i-1], fillcolor="lightgreen", opacity=0.2, line_width=0)
            start = None
    if start is not None:
        fig.add_vrect(x0=start, x1=df.index[-1], fillcolor="lightgreen", opacity=0.2, line_width=0)

fig.update_layout(
    title="RAOUL PAL LIQUIDITY DASHBOARD (Live on Replit)",
    yaxis=dict(title="YoY % Change"),
    yaxis2=dict(title="ISM PMI", overlaying="y", side="right"),
    template="plotly_dark",
    height=600,
    hovermode="x unified"
)

# === 7. SHOW CHART + PRINT SIGNAL ===
fig.show()

latest = df.iloc[-1]
signal = latest['Signal']
color = "🟢" if signal == "RISK-ON" else "🔴" if signal == "TIGHT" else "🟡"

print("\n" + "═" * 60)
print(f"{color} LIQUIDITY SIGNAL: {signal} {color}")
print(f"   Fed YoY: {latest['Fed_YoY']:.1f}%")
print(f"   M2 YoY:  {latest['M2_YoY']:.1f}%")
print(f"   TGA+RRP 4wk Δ: ${latest['TGA_RRP_4wk']:,.0f}M")
print(f"   ISM PMI: {latest['ISM_PMI']:.1f}")
print("═" * 60)
print(f"Updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}")

STEP 5: Install Required Packages (One Time)
In the left panel, click “Packages” (📦 icon)
Search and add:

fredapi
plotly
pandas

Or run this in Shell (bottom panel):
bashpip install fredapi plotly pandas numpy

STEP 6: Run It!
Click the green “Run” button (▶️ top center)
Output:

Interactive Plotly chart appears
Latest signal printed in console (e.g., RISK-ON)


BONUS: AUTO-RUN EVERY THURSDAY (Optional)
Replit has “Always On” and Scheduled Runs via Cron Jobs.
Option 1: Use UptimeRobot (Free, 1 Click)

Go to: uptimerobot.com
Sign up → Add monitor → HTTP(s) → Paste your Repl URL:
texthttps://liquidity-dashboard.yourusername.repl.co

Set interval: 5 minutes
Replit wakes up and runs main.py automatically


Your dashboard updates every Thursday when Fed H.4.1 drops!


Option 2: Add Auto-Run Message
Add this to the top of main.py:
pythonprint("Dashboard auto-updated every Thursday at 17:00 UTC")
→ Shows when someone visits.

FINAL: SHARE YOUR DASHBOARD

Click “Share” (top right)
Copy “Public URL”
Send to friends:
https://liquidity-dashboard.yourusername.repl.co

Anyone can view live chart + signal — no login!

YOUR REPLIT WEEKLY ROUTINE





















DayActionThursday 4:30 PM ETFed releases H.4.1Your ReplAuto-updates within 5 minYouCheck signal → Trade

NEED A READY-MADE REPL?
Fork this live template (already working):
https://replit.com/@GrokMacro/Liquidity-Dashboard

Click “Fork”
Add your FRED API key in Secrets
Run!


You now have Raoul Pal’s liquidity pulse running 24/7 on Replit.
No install. No cost. Just results.
Let me know if you want:

Email alerts
Bitcoin/S&P overlay
Dark mode toggle
Mobile view

You’re live. Go win.